THEOREY:
ðŸ“˜ Lambda Expression in Java â€” Theory Points
- Definition:
A lambda expression is a concise way to represent a method using only its logic â€” without writing the full method declaration.
- Used With:
Lambda expressions are used to implement functional interfaces (interfaces with only one abstract method).
- Purpose:
To reduce boilerplate code, especially in anonymous classes, event handling, and stream operations.
- Syntax:
(parameters) -> expression
- Or for multi-line logic:
(parameters) -> {
    // statements
    return result;
}
- No Class or Method Name:
You donâ€™t declare a class or method name â€” just the logic.
- Type Inference:
Java can infer parameter types from context, so you can omit them.
- Return Type:
Automatically inferred if the body is a single expression.
- Functional Programming:
Enables functional-style operations like map, filter, reduce in streams.
- Introduced In:
Java 8 (2014), as part of the Java Stream and Functional API.
- Cannot Be Used Alone:
Must be assigned to a functional interface reference.


//without lambda expression
interfaceÂ Drawable{Â Â 
Â Â Â Â publicÂ voidÂ draw();Â Â 
}Â Â 
publicÂ classÂ LambdaExpressionExampleÂ {Â Â 
Â Â Â Â publicÂ staticÂ voidÂ main(String[]Â args)Â {Â Â 
Â Â Â Â Â Â Â Â intÂ width=10;Â Â 
Â Â Â Â Â Â Â Â //withoutÂ lambda,Â DrawableÂ implementationÂ usingÂ anonymousÂ classÂ Â 
Â Â Â Â Â Â Â Â DrawableÂ d=newÂ Drawable(){Â Â 
Â Â Â Â Â Â Â Â Â Â Â Â publicÂ voidÂ draw(){System.out.println("DrawingÂ "+width);}Â Â 
Â Â Â Â Â Â Â Â };Â Â 
Â Â Â Â Â Â Â Â d.draw();Â Â }Â Â 



//with lambda expression
interfaceÂ Drawable{Â Â 
Â Â Â Â publicÂ voidÂ draw();Â Â 
}Â Â 
publicÂ classÂ LambdaExpressionExample2Â {Â Â 
Â Â Â Â publicÂ staticÂ voidÂ main(String[]Â args)Â {Â Â 
Â Â Â Â Â Â Â Â intÂ width=10;Â Â Â Â 
Â Â Â Â Â Â Â Â //withÂ lambdaÂ Â 
Â Â Â Â Â Â Â Â DrawableÂ d2=()->{System.out.println("DrawingÂ "+width);Â Â 
Â Â Â Â Â Â Â Â };Â Â 
Â Â Â Â Â Â Â Â d2.draw();Â Â 
Â Â Â Â }Â Â 
}Â Â 


//lambda with single parameter
// Functional interface with one parameter
@FunctionalInterface
interface Greeting {
    void sayHello(String name);
}

public class SingleParamLambda {
    public static void main(String[] args) {
        // Lambda expression with single parameter
        Greeting g = name -> System.out.println("Hello, " + name);

        // Calling the method
        g.sayHello("Aditi");
    }
}



//lambda with double parameter
// Functional interface with two parameters
@FunctionalInterface
interface Calculator {
    int add(int a, int b);
}

public class MultipleParamLambda {
    public static void main(String[] args) {
        // Lambda expression with multiple parameters
        Calculator c = (a, b) -> a + b;

        // Calling the method
        int result = c.add(5, 3);
        System.out.println("Sum: " + result);
    }
}


