 What Is an Exception?
An exception is an event that disrupts the normal flow of a program. It occurs during runtime and can be handled using Java‚Äôs built-in mechanisms.

üîç Difference Between Error and Exception
- Error: Serious issues like OutOfMemoryError, StackOverflowError. Not meant to be handled.
- Exception: Recoverable issues like IOException, ArithmeticException. Can be handled using try-catch.

üß© Types of Exceptions
‚úÖ Checked Exceptions
- Checked at compile time
- Must be handled using try-catch or declared using throws
- Examples: IOException, SQLException, FileNotFoundException

‚úÖ Unchecked Exceptions
- Checked at runtime
- Caused by programming errors
- Examples: ArithmeticException, NullPointerException, ArrayIndexOutOfBoundsException

üîê Exception Handling Keywords
1. try
Defines a block of code to monitor for exceptions.
2. catch
Defines a block of code to handle the exception.
3. finally
Defines a block that always executes, regardless of exception.
4. throw
Used to explicitly throw an exception.
5. throws
Used to declare exceptions that a method might throw.

üîß Syntax Overview
try {
    // risky code
} catch (ExceptionType e) {
    // handling code
} finally {
    // cleanup code
}



üß™ Code Examples
‚úÖ Example 1: Basic try-catch
public class TryCatchDemo {
    public static void main(String[] args) {
        try {
            int result = 10 / 0;
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero.");
        }
    }
}



‚úÖ Example 2: try-catch-finally
public class FinallyDemo {
    public static void main(String[] args) {
        try {
            String str = null;
            System.out.println(str.length());
        } catch (NullPointerException e) {
            System.out.println("Caught NullPointerException.");
        } finally {
            System.out.println("Finally block executed.");
        }
    }
}



‚úÖ Example 3: throw keyword
public class ThrowDemo {
    public static void main(String[] args) {
        int age = 15;
        if (age < 18) {
            throw new ArithmeticException("Not eligible to vote.");
        }
    }
}



‚úÖ Example 4: throws keyword
import java.io.*;

public class ThrowsDemo {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Enter your name: ");
        String name = reader.readLine();
        System.out.println("Hello, " + name);
    }
}

Ó∑ôÓ∑ö

üõ† User-Defined Exception
You can create your own exception class by extending Exception or RuntimeException.
üîπ Step-by-Step:
- Create a class that extends Exception
- Define a constructor with a custom message
- Use throw to raise it
- Handle it using try-catch

‚úÖ Example: Custom Age Validation Exception
// Step 1: Define custom exception
class AgeException extends Exception {
    public AgeException(String message) {
        super(message);
    }
}

// Step 2: Use it in a program
public class UserDefinedExceptionDemo {
    public static void main(String[] args) {
        try {
            validateAge(16);
        } catch (AgeException e) {
            System.out.println("Caught Exception: " + e.getMessage());
        }
    }

    static void validateAge(int age) throws AgeException {
        if (age < 18) {
            throw new AgeException("Age must be 18 or above.");
        } else {
            System.out.println("Valid age.");
        }
    }
}


üß™ Output:
Caught Exception: Age must be 18 or above.



‚úÖ Example: Custom Bank Exception
// Custom exception class
class InsufficientFundsException extends Exception {
    public InsufficientFundsException(String message) {
        super(message);
    }
}

// Main class
public class BankTransaction {
    public static void main(String[] args) {
        try {
            withdraw(500, 1000);
        } catch (InsufficientFundsException e) {
            System.out.println("Transaction failed: " + e.getMessage());
        }
    }

    static void withdraw(int balance, int amount) throws InsufficientFundsException {
        if (amount > balance) {
            throw new InsufficientFundsException("Insufficient balance.");
        } else {
            System.out.println("Withdrawal successful.");
        }
    }
}

Ó∑ôÓ∑ö
üß™ Output:
Transaction failed: Insufficient balance.



üìå Best Practices
- Always catch specific exceptions first, then general ones.
- Use finally for cleanup like closing files or connections.
- Avoid swallowing exceptions silently.
- Use custom exceptions for domain-specific errors (e.g., billing, scheduling).

Would you like me to wrap this into a GitHub README with SEO tags and dry-run tables? Or modularize it for your billing or OS scheduling system with exception handling layers?
4. throw
Used to explicitly throw an exception.
5. throws
Used to declare exceptions that a method might throw.

üîß Syntax Overview
try {
    // risky code
} catch (ExceptionType e) {
    // handling code
} finally {
    // cleanup code
}

üß™ Code Examples
‚úÖ Example 1: Basic try-catch
public class TryCatchDemo {
    public static void main(String[] args) {
        try {
            int result = 10 / 0;
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero.");
        }
    }
}

‚úÖ Example 2: try-catch-finally
public class FinallyDemo {
    public static void main(String[] args) {
        try {
            String str = null;
            System.out.println(str.length());
        } catch (NullPointerException e) {
            System.out.println("Caught NullPointerException.");
        } finally {
            System.out.println("Finally block executed.");
        }
    }
}



‚úÖ Example 3: throw keyword
public class ThrowDemo {
    public static void main(String[] args) {
        int age = 15;
        if (age < 18) {
            throw new ArithmeticException("Not eligible to vote.");
        }
    }
}

‚úÖ Example 4: throws keyword
import java.io.*;

public class ThrowsDemo {
    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        System.out.print("Enter your name: ");
        String name = reader.readLine();
        System.out.println("Hello, " + name);
    }
}

Ó∑ôÓ∑ö


Types of Exceptions in Java
Java exceptions are broadly categorized into:
‚úÖ 1. Built-in Exceptions
These are part of the Java API and automatically thrown by the JVM or Java libraries.
üîπ Common Checked Exceptions (Compile-Time)
- IOException ‚Äì Issues during input/output operations
- FileNotFoundException ‚Äì File not found while reading
- SQLException ‚Äì Database access errors
- ClassNotFoundException ‚Äì Class not found during runtime
- InterruptedException ‚Äì Thread interruption
üîπ Common Unchecked Exceptions (Runtime)
- ArithmeticException ‚Äì Division by zero
- NullPointerException ‚Äì Accessing a null object
- ArrayIndexOutOfBoundsException ‚Äì Invalid array index
- NumberFormatException ‚Äì Improper string-to-number conversion
- IllegalArgumentException ‚Äì Invalid method argument

‚úÖ 2. User-Defined Exceptions
These are custom exceptions created by developers to handle domain-specific errors.
üîπ How to Create a User-Defined Exception
- Extend the Exception class (for checked) or RuntimeException (for unchecked).
- Define a constructor with a custom message.
- Use throw to raise it.
- Handle it using try-catch.

üß™ Example 1: Custom Age Validation Exception
// Step 1: Define custom exception
class AgeException extends Exception {
    public AgeException(String message) {
        super(message);
    }
}

// Step 2: Use it in a program
public class AgeValidator {
    public static void main(String[] args) {
        try {
            validateAge(16);
        } catch (AgeException e) {
            System.out.println("Caught Exception: " + e.getMessage());
        }
    }

    static void validateAge(int age) throws AgeException {
        if (age < 18) {
            throw new AgeException("Age must be 18 or above.");
        } else {
            System.out.println("Valid age.");
        }
    }
}



üß™ Example 2: Custom Bank Transaction Exception
// Custom exception class
class InsufficientFundsException extends Exception {
    public InsufficientFundsException(String message) {
        super(message);
    }
}

// Main class
public class BankTransaction {
    public static void main(String[] args) {
        try {
            withdraw(500, 1000);
        } catch (InsufficientFundsException e) {
            System.out.println("Transaction failed: " + e.getMessage());
        }
    }

    static void withdraw(int balance, int amount) throws InsufficientFundsException {
        if (amount > balance) {
            throw new InsufficientFundsException("Insufficient balance.");
        } else {
            System.out.println("Withdrawal successful.");
        }
    }
}

Ó∑ôÓ∑ö












